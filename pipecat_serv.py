# server.py
import asyncio
import logging
import time

from pipecat.pipeline.pipeline import Pipeline
from pipecat.pipeline.runner import PipelineRunner
from pipecat.pipeline.task import PipelineTask
from pipecat.transports.network.websocket_server import (
    WebsocketServerParams,
    WebsocketServerTransport,
)
from pipecat.audio.vad.silero import SileroVADAnalyzer
from pipecat.processors.frame_processor import FrameProcessor
from pipecat.audio.vad.vad_analyzer import VADState
from pipecat.frames.frames import Frame, AudioRawFrame
from pipecat.processors.frame_processor import FrameProcessor

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logging.getLogger("pipecat").setLevel(logging.WARNING)
logger = logging.getLogger("pipecat-app")
logger.setLevel(logging.INFO)

class EchoProcessor(FrameProcessor):
    def __init__(self):
        super().__init__()
        self.is_echoing = True
        self.last_activity = time.time()
        self.activity_threshold = 0.5
        self.vad_state = VADState.QUIET
        
    async def process_frame(self, frame: Frame, direction):
        # –í—Å–µ —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ—Ä–µ–π–º—ã –∏ —Ñ—Ä–µ–π–º—ã, –∏–¥—É—â–∏–µ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

        # –õ–æ–≤–∏–º VAD-—Ñ—Ä–µ–π–º—ã, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—à–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if hasattr(frame, 'vad_state'):
            if frame.state == VADState.SPEAKING:
                if not self.is_echoing:
                    logger.info("üé§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ–≤–æ—Ä–∏—Ç, –í–ö–õ–Æ–ß–ê–Æ —ç—Ö–æ.")
                    self.is_echoing = True
            elif frame.state == VADState.QUIET:
                if self.is_echoing:
                    logger.info("ü§´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º–æ–ª—á–∞–ª, –í–´–ö–õ–Æ–ß–ê–Æ —ç—Ö–æ.")
                    self.is_echoing = False
            # VAD-—Ñ—Ä–µ–π–º—ã –Ω–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –æ–Ω–∏ —Å–ª—É–∂–µ–±–Ω—ã–µ
            return

        if self.is_echoing:
                # –ï—Å–ª–∏ —ç—Ö–æ –≤–∫–ª—é—á–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await self.push_frame(frame, direction)
        #

async def main():
    # –°–æ–∑–¥–∞–µ–º VAD –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    vad_analyzer = SileroVADAnalyzer()
    
    # –°–æ–∑–¥–∞–µ–º —ç—Ö–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    echo_processor = EchoProcessor()
    
    transport = WebsocketServerTransport(
        host="localhost",
        port=8765,
        params=WebsocketServerParams(
            audio_in_enabled=True,
            audio_out_enabled=True,
            vad_analyzer=vad_analyzer,
        ),
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    @transport.event_handler("on_client_connected")
    async def on_client_connected(transport, client_id):
        logger.info(f"‚úÖ –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: {client_id}")
        logger.info("üé§ –≠—Ö–æ —Å–µ—Ä–≤–µ—Ä —Å –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏–µ–º –≥–æ—Ç–æ–≤!")

    @transport.event_handler("on_client_disconnected")
    async def on_client_disconnected(transport, client_id):
        logger.info(f"‚ùå –ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è: {client_id}")

    # –ü–∞–π–ø–ª–∞–π–Ω —Å —ç—Ö–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–º
    pipeline = Pipeline([
        transport.input(),
        echo_processor,
        transport.output(),
    ])

    runner = PipelineRunner()
    task = PipelineTask(pipeline)
    await runner.run(task)

if __name__ == "__main__":
    logger.info("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:8765/ws")
    logger.info("üîä –≠—Ö–æ —Å–µ—Ä–≤–µ—Ä —Å –ª–æ–≥–∏–∫–æ–π –ø–µ—Ä–µ–±–∏–≤–∞–Ω–∏—è")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")