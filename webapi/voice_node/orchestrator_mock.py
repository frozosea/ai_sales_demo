#!/usr/bin/env python3
"""
–ú–æ–∫-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import asyncio
import time
from typing import AsyncIterator, Optional, Callable


class OrchestratorMock:
    """
    –û—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–π –º–æ–∫:
    - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç "—ç—Ö–æ" —Ç–µ–∫—Å—Ç–∞/–∞—É–¥–∏–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–∏–Ω—Ç–µ—Ç–∏–∫—É: sine-–±–∏–ø + –ø–∞—É–∑—ã,
      –ª–∏–±–æ –ø—Ä–æ–∫—Å–∏—Ä—É–µ—Ç –∑–∞—Ä–∞–Ω–µ–µ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π PCM 8k (–µ—Å–ª–∏ –ø–æ–¥–ª–æ–∂–∏–º).
    - –£–º–µ–µ—Ç "–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å" —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º –ø–æ barge-in (—á–µ—Ä–µ–∑ —Ñ–ª–∞–≥).
    - –õ–æ–≥–∏—Ä—É–µ—Ç t4/t5 —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ –∫–æ–ª–±—ç–∫–∏ (–≤—ã—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Ö –Ω–∞—Ä—É–∂—É).
    """
    
    def __init__(self):
        self._stop_flag = False
        self.on_tts_first_chunk: Optional[Callable[[str, float], None]] = None  # callable(trace_id, ts)
        self.on_llm_request_done: Optional[Callable[[str, float], None]] = None  # callable(trace_id, ts)
    
    def stop_playback(self, trace_id: str):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"""
        print(f"üõë OrchestratorMock: stop_playback called for {trace_id}")
        self._stop_flag = True
    
    async def get_audio_reply(self, trace_id: str, user_pcm8k: bytes) -> AsyncIterator[bytes]:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç 8–∫ PCM –º–æ–Ω–æ—Ç–æ–Ω—ã. –î–ª—è –¥–µ–º–æ: —Å–Ω–∞—á–∞–ª–∞ –∫–æ—Ä–æ—Ç–∫–∏–π —Å–∏–≥–Ω–∞–ª, –ø–æ—Ç–æ–º "—ç—Ö–æ".
        –ß–∞–Ω–∫ ~20–º—Å = 160 —Å—ç–º–ø–ª–æ–≤ = 320 –±–∞–π—Ç (s16le mono).
        """
        print(f"üéµ OrchestratorMock: generating audio reply for {trace_id}, input size: {len(user_pcm8k)} bytes")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è "LLM –≥–æ—Ç–æ–≤–∏—Ç –æ—Ç–≤–µ—Ç"
        await asyncio.sleep(0.12)
        if self.on_llm_request_done:
            self.on_llm_request_done(trace_id, time.monotonic())
        
        # –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        self._stop_flag = False
        
        frame = b"\x00\x00" * 160  # —Ç–∏—à–∏–Ω–∞ 20–º—Å
        beep = (b"\x7f\x00" * 80) + (b"\x00\x00" * 80)  # –ø—Ä–æ—Å—Ç–æ–π "–±–∏–ø" ~20–º—Å
        
        # –ü–µ—Ä–≤—ã–π "–±–∏–ø" –∫–∞–∫ –ø—Ä–∏–∑–Ω–∞–∫ tts first chunk
        if self.on_tts_first_chunk:
            self.on_tts_first_chunk(trace_id, time.monotonic())
        
        print(f"üîä OrchestratorMock: sending first beep for {trace_id}")
        yield beep
        
        # –ó–∞—Ç–µ–º 40 —Ñ—Ä–µ–π–º–æ–≤ "—Ç–∏—Ö–æ–π —Ä–µ—á–∏"
        for i in range(40):
            if self._stop_flag:
                print(f"‚õî OrchestratorMock: stopping playback for {trace_id} at frame {i}")
                self._stop_flag = False
                return
            
            await asyncio.sleep(0.02)  # 20ms delay
            yield frame
        
        print(f"‚úÖ OrchestratorMock: finished audio reply for {trace_id}")
    
    async def on_speech_started(self, trace_id: str, ts_monotonic: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ—á–∏"""
        print(f"üó£Ô∏è  OrchestratorMock: speech started {trace_id} at {ts_monotonic}")
    
    async def on_partial_audio(self, trace_id: str, pcm8k_chunk: bytes):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ –∞—É–¥–∏–æ (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)"""
        pass
    
    async def on_speech_ended(self, trace_id: str, utterance_pcm8k: bytes, t_first_byte: float, t_last_byte: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ü–∞ —Ä–µ—á–∏"""
        duration_ms = (t_last_byte - t_first_byte) * 1000
        print(f"üèÅ OrchestratorMock: speech ended {trace_id}, duration: {duration_ms:.1f}ms, size: {len(utterance_pcm8k)} bytes")
    
    async def on_barge_in_detected(self, trace_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ barge-in"""
        print(f"‚ö° OrchestratorMock: barge-in detected for {trace_id}")
        self.stop_playback(trace_id)
    
    async def play_filler(self, trace_id: str, key: str):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—è (–Ω–∞ –±—É–¥—É—â–µ–µ)"""
        print(f"üé∂ OrchestratorMock: play_filler {key} for {trace_id} (not implemented)")
        pass
