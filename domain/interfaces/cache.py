from __future__ import annotations
import abc
from typing import List, Optional

class AbstractCache(abc.ABC):
    @abc.abstractmethod
    async def connect(self) -> None: ...
    @abc.abstractmethod
    async def close(self) -> None: ...

    @abc.abstractmethod
    async def load_and_set_audio(self, key: str, wav_filepath: str, chunk_size_ms: int = 20) -> bool: ...
    @abc.abstractmethod
    async def set_audio_chunks(self, key: str, audio_chunks: List[bytes]) -> bool: ...
    @abc.abstractmethod
    async def get_audio_chunks(self, key: str) -> Optional[List[bytes]]: ...

    @abc.abstractmethod
    async def set_text(self, key: str, text: str, ttl_seconds: int) -> bool: ...
    @abc.abstractmethod
    async def get_text(self, key: str) -> Optional[str]: ...