#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ TTS —Ç–µ—Å—Ç–∞—Ö
"""

import asyncio
import argparse
from pathlib import Path

from tts_manager.test.manual_test_tts import TTSBenchmark


async def test_audio_playback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ"""
    parser = argparse.ArgumentParser(description="TTS Audio Playback Test")
    parser.add_argument("--config", default="configs/tts_config.yml", help="Path to TTS config")
    parser.add_argument("--out", default="reports", help="Output directory for reports")
    parser.add_argument("--text", default="–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ.", help="Text to synthesize")
    parser.add_argument("--save-audio", action="store_true", help="Save generated audio files")
    parser.add_argument("--play-audio", action="store_true", help="Play generated audio files")
    
    args = parser.parse_args()
    
    print(f"üéµ TTS Audio Playback Test")
    print(f"üìù Text: {args.text}")
    print(f"üíæ Save audio: {args.save_audio}")
    print(f"üîä Play audio: {args.play_audio}")
    print(f"üìÅ Output: {args.out}")
    print("-" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫ —Å –æ–¥–Ω–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º
    benchmark = TTSBenchmark(
        config_path=args.config,
        output_dir=args.out,
        repeats=1,  # –¢–æ–ª—å–∫–æ –æ–¥–Ω–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        save_audio=args.save_audio,
        play_audio=args.play_audio
    )
    
    try:
        await benchmark.setup()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ HTTP –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
        print("üöÄ Starting HTTP test...")
        results = await benchmark.run_http_case(args.text, "demo_test")
        
        print("‚úÖ Test completed!")
        
        if args.save_audio:
            print(f"üìÅ Audio files saved to: {benchmark.audio_dir}")
        
        if args.play_audio:
            print("üîä Audio playback completed!")
            
    except Exception as e:
        print(f"‚ùå Error: {e}")
    finally:
        await benchmark.cleanup()


if __name__ == "__main__":
    asyncio.run(test_audio_playback())
